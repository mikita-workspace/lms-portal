'use client';

import { zodResolver } from '@hookform/resolvers/zod';
import { Chapter } from '@prisma/client';
import { Pencil, Trash2 } from 'lucide-react';
import { useRouter } from 'next/navigation';
import { useState } from 'react';
import { useForm } from 'react-hook-form';
import Markdown from 'react-markdown';
import ScrollToBottom from 'react-scroll-to-bottom';
import * as z from 'zod';

import { GenerateTextResponseAi } from '@/components/ai/generate-text-response-ai';
import { CopyClipboard } from '@/components/common/copy-clipboard';
import { Editor } from '@/components/common/editor';
import { Preview } from '@/components/common/preview';
import { Button } from '@/components/ui/button';
import { Form, FormControl, FormField, FormItem, FormMessage } from '@/components/ui/form';
import { useToast } from '@/components/ui/use-toast';
import { USER_CHAPTER_DESCRIPTION_PROMPT } from '@/constants/ai';
import { ChatCompletionRole } from '@/constants/open-ai';
import { fetcher } from '@/lib/fetcher';
import { cn } from '@/lib/utils';

type ChapterDescriptionFormProps = {
  chapterId: string;
  courseId: string;
  initialData: Chapter;
};

const formSchema = z.object({
  description: z.string(),
});

export const ChapterDescriptionForm = ({
  chapterId,
  courseId,
  initialData,
}: ChapterDescriptionFormProps) => {
  const { toast } = useToast();
  const router = useRouter();

  const form = useForm<z.infer<typeof formSchema>>({
    resolver: zodResolver(formSchema),
    defaultValues: {
      description: initialData?.description || '',
    },
  });

  const [isEditing, setIsEditing] = useState(false);
  const [newDescription, setNewDescription] = useState('');

  const { isSubmitting, isValid } = form.formState;

  const handleToggleEdit = () => {
    setIsEditing((prev) => !prev);
    setNewDescription('');
  };

  const handleTrash = () => {
    form.resetField('description');
    setNewDescription('');
  };

  const handleSubmit = async (values: z.infer<typeof formSchema>) => {
    try {
      await fetcher.patch(`/api/courses/${courseId}/chapters/${chapterId}`, { body: values });

      toast({ title: 'Chapter updated' });
      handleToggleEdit();

      router.refresh();
    } catch (error) {
      toast({ isError: true });
    }
  };

  return (
    <div className="mt-6 border  bg-neutral-100 dark:bg-neutral-900 rounded-md p-4">
      <div className="font-medium flex items-center justify-between">
        Description
        <div className="flex items-center gap-x-2">
          {isEditing && (
            <GenerateTextResponseAi
              callback={setNewDescription}
              isSubmitting={isSubmitting}
              isValid={isValid}
              messages={[
                {
                  role: ChatCompletionRole.USER,
                  content: USER_CHAPTER_DESCRIPTION_PROMPT(
                    form.getValues().description.replace(/\n$/, ''),
                  ),
                },
              ]}
            />
          )}
          {isEditing && (
            <Button variant="outline" size="sm" disabled={isSubmitting} onClick={handleTrash}>
              <Trash2 className="h-4 w-4" />
            </Button>
          )}
          <Button onClick={handleToggleEdit} variant="outline" size="sm" disabled={isSubmitting}>
            {isEditing ? (
              <>Cancel</>
            ) : (
              <>
                <Pencil className="h-4 w-4 mr-2" />
                Edit
              </>
            )}
          </Button>
        </div>
      </div>
      {!isEditing && (
        <div
          className={cn('text-sm mt-4', !initialData.description && 'text-neutral-500 italic mt-2')}
        >
          {initialData.description ? (
            <Preview id={initialData.id} value={initialData.description} />
          ) : (
            'No description'
          )}
        </div>
      )}
      {isEditing && newDescription && (
        <div className="my-4 flex flex-col gap-2">
          <div className="flex items-center gap-2">
            <p className="text-sm font-medium">Generated by Nova Copilot</p>
            <CopyClipboard textToCopy={newDescription} disabled={isSubmitting} />
          </div>
          <ScrollToBottom
            className="flex h-[200px] w-full flex-co border-2 border-violet-500 rounded-lg"
            followButtonClassName="scroll-to-bottom-button"
          >
            <p className="text-sm prose dark:prose-invert prose-a:text-accent-primary prose-a:no-underline hover:prose-a:underline m-4">
              <Markdown>{newDescription}</Markdown>
            </p>
          </ScrollToBottom>
        </div>
      )}
      {isEditing && (
        <Form {...form}>
          <form className="space-y-4 mt-4" onSubmit={form.handleSubmit(handleSubmit)}>
            <FormField
              control={form.control}
              name="description"
              render={({ field }) => (
                <FormItem>
                  <FormControl>
                    <Editor {...field} />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />
            <div className="flex items-center gap-x-2">
              <Button disabled={!isValid || isSubmitting} isLoading={isSubmitting} type="submit">
                Save
              </Button>
            </div>
          </form>
        </Form>
      )}
    </div>
  );
};
