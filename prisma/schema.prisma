generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_PRISMA_URL") // uses connection pooling
}

model User {
  course        Course[]
  createdAt     DateTime       @default(now())
  email         String         @unique
  id            String         @id @default(uuid())
  is2mfa        Boolean?       @default(false)
  isPublic      Boolean?       @default(false)
  name          String?
  notifications Notification[]
  pictureUrl    String?
  role          String         @default("student")
  updatedAt     DateTime       @updatedAt
}

model Course {
  id          String       @id @default(uuid())
  attachments Attachment[]
  category    Category?    @relation(fields: [categoryId], references: [id])
  categoryId  String?
  chapters    Chapter[]
  createdAt   DateTime     @default(now())
  customRates String?
  customTags  String[]
  description String?      @db.Text
  imageUrl    String?      @db.Text
  isPublished Boolean      @default(false)
  price       Int?         @default(0)
  purchases   Purchase[]
  title       String       @db.Text
  updatedAt   DateTime     @updatedAt
  user        User         @relation(fields: [userId], references: [id])
  userId      String

  @@index([categoryId])
}

model Category {
  id      String   @id @default(uuid())
  courses Course[]
  name    String   @unique
}

model Attachment {
  id        String   @id @default(uuid())
  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  courseId  String
  createdAt DateTime @default(now())
  name      String
  updatedAt DateTime @updatedAt
  url       String   @db.Text

  @@index([courseId])
}

model Chapter {
  id           String         @id @default(uuid())
  course       Course         @relation(fields: [courseId], references: [id], onDelete: Cascade)
  courseId     String
  createdAt    DateTime       @default(now())
  description  String?        @db.Text
  isFree       Boolean        @default(false)
  isPublished  Boolean        @default(false)
  muxData      MuxData?
  position     Int
  title        String
  updatedAt    DateTime       @updatedAt
  userProgress UserProgress[]
  videoUrl     String?        @db.Text

  @@index([courseId])
}

model MuxData {
  id        String  @id @default(uuid())
  chapter   Chapter @relation(fields: [chapterId], references: [id], onDelete: Cascade)
  chapterId String  @unique
  videoUrl  String? @db.Text
}

model UserProgress {
  id          String   @id @default(uuid())
  chapter     Chapter? @relation(fields: [chapterId], references: [id], onDelete: Cascade)
  chapterId   String
  createdAt   DateTime @default(now())
  isCompleted Boolean  @default(false)
  updatedAt   DateTime @updatedAt
  userId      String

  @@unique([userId, chapterId])
  @@index([chapterId])
}

model PurchaseDetails {
  id            String   @id @default(uuid())
  city          String?
  country       String?
  countryCode   String?
  createdAt     DateTime @default(now())
  currency      String?
  invoiceId     String?
  latitude      Float?
  longitude     Float?
  paymentIntent String?
  price         Int?
  purchase      Purchase @relation(fields: [purchaseId], references: [id], onDelete: Cascade)
  purchaseId    String
  updatedAt     DateTime @updatedAt

  @@unique([purchaseId])
}

model Purchase {
  id        String           @id @default(uuid())
  course    Course           @relation(fields: [courseId], references: [id], onDelete: Cascade)
  courseId  String
  createdAt DateTime         @default(now())
  details   PurchaseDetails?
  updatedAt DateTime         @updatedAt
  userId    String

  @@unique([userId, courseId])
  @@index([courseId])
}

model StripeCustomer {
  id               String   @id @default(uuid())
  createdAt        DateTime @default(now())
  stripeCustomerId String   @unique
  updatedAt        DateTime @updatedAt
  userId           String   @unique
}

model StripeConnectAccount {
  id              String          @id @default(uuid())
  createdAt       DateTime        @default(now())
  payoutRequests  PayoutRequest[]
  stripeAccountId String          @unique
  updatedAt       DateTime        @updatedAt
  userId          String          @unique
}

model StripePromo {
  id             String   @id @default(uuid())
  code           String
  createdAt      DateTime @default(now())
  isActive       Boolean  @default(true)
  stripeCouponId String
  stripePromoId  String   @unique
  updatedAt      DateTime @updatedAt
}

model Fee {
  id        String   @id @default(uuid())
  amount    Int      @default(0)
  createdAt DateTime @default(now())
  method    String
  name      String   @unique
  rate      Float    @default(0)
  type      String?
  updatedAt DateTime @updatedAt
}

model PayoutRequest {
  id                   String               @id @default(uuid())
  amount               Int
  connectAccount       StripeConnectAccount @relation(fields: [connectAccountId], references: [id])
  connectAccountId     String
  createdAt            DateTime             @default(now())
  currency             String
  destinationPaymentId String?
  status               String
  transactionId        String?
  updatedAt            DateTime             @updatedAt

  @@index([connectAccountId])
}

model Notification {
  id        String   @id @default(uuid())
  body      String
  createdAt DateTime @default(now())
  isRead    Boolean  @default(false)
  title     String
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String

  @@index([userId])
}

model AuthFlow {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  isActive  Boolean
  provider  String
  updatedAt DateTime @updatedAt
}
