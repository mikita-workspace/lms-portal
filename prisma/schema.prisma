generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "fullTextIndex"]
}

datasource db {
  provider     = "mysql"
  relationMode = "prisma"
  url          = env("MYSQL_PRISMA_URL") // uses connection pooling
}

model User {
  id         String   @id @default(uuid())
  Course     Course[]
  createdAt  DateTime @default(now())
  email      String   @unique
  isPublic   Boolean? @default(false)
  name       String?
  pictureUrl String?
  role       String   @default("student")
  updatedAt  DateTime @updatedAt
}

model Course {
  id          String       @id @default(uuid())
  attachments Attachment[]
  category    Category?    @relation(fields: [categoryId], references: [id])
  categoryId  String?
  chapters    Chapter[]
  createdAt   DateTime     @default(now())
  description String?      @db.Text
  imageUrl    String?      @db.Text
  isPublished Boolean      @default(false)
  price       Int?         @default(0)
  purchases   Purchase[]
  title       String       @db.Text
  updatedAt   DateTime     @updatedAt
  user        User         @relation(fields: [userId], references: [id])
  userId      String

  @@index([categoryId])
  @@index([userId])
  @@fulltext([title])
}

model Category {
  id      String   @id @default(uuid())
  courses Course[]
  name    String   @unique
}

model Attachment {
  id        String   @id @default(uuid())
  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  courseId  String
  createdAt DateTime @default(now())
  name      String
  updatedAt DateTime @updatedAt
  url       String   @db.Text

  @@index([courseId])
}

model Chapter {
  id           String         @id @default(uuid())
  course       Course         @relation(fields: [courseId], references: [id], onDelete: Cascade)
  courseId     String
  createdAt    DateTime       @default(now())
  description  String?        @db.Text
  isFree       Boolean        @default(false)
  isPublished  Boolean        @default(false)
  muxData      MuxData?
  position     Int
  title        String
  updatedAt    DateTime       @updatedAt
  userProgress UserProgress[]
  videoUrl     String?        @db.Text

  @@index([courseId])
}

model MuxData {
  id        String  @id @default(uuid())
  chapter   Chapter @relation(fields: [chapterId], references: [id], onDelete: Cascade)
  chapterId String  @unique
  videoUrl  String? @db.Text
}

model UserProgress {
  id          String   @id @default(uuid())
  chapter     Chapter? @relation(fields: [chapterId], references: [id], onDelete: Cascade)
  chapterId   String
  createdAt   DateTime @default(now())
  isCompleted Boolean  @default(false)
  updatedAt   DateTime @updatedAt
  userId      String

  @@unique([userId, chapterId])
  @@index([chapterId])
}

model PurchaseDetails {
  id          String   @id @default(uuid())
  city        String?
  country     String?
  countryCode String?
  createdAt   DateTime @default(now())
  currency    String?
  invoiceId   String?
  latitude    Float?
  longitude   Float?
  price       Int?
  purchase    Purchase @relation(fields: [purchaseId], references: [id], onDelete: Cascade)
  purchaseId  String
  updatedAt   DateTime @updatedAt

  @@unique([purchaseId])
}

model Purchase {
  id        String           @id @default(uuid())
  course    Course           @relation(fields: [courseId], references: [id], onDelete: Cascade)
  courseId  String
  createdAt DateTime         @default(now())
  details   PurchaseDetails?
  updatedAt DateTime         @updatedAt
  userId    String

  @@unique([userId, courseId])
  @@index([courseId])
}

model StripeCustomer {
  id               String   @id @default(uuid())
  createdAt        DateTime @default(now())
  stripeCustomerId String   @unique
  updatedAt        DateTime @updatedAt
  userId           String   @unique
}
