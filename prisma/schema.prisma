generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  String                   @id @default(uuid())
  createdAt           DateTime                 @default(now())
  email               String                   @unique
  isPublic            Boolean?                 @default(false)
  name                String?
  otpCreatedAt        DateTime?
  otpSecret           String?
  password            String?
  pictureUrl          String?
  role                String                   @default("student")
  updatedAt           DateTime                 @updatedAt
  conversations       ChatConversation[]
  sharedConversations ChatSharedConversation[]
  courses             Course[]
  csmIssues           CsmIssue[]
  notifications       Notification[]
  stripeSubscription  StripeSubscription?
}

model UserProgress {
  id          String   @id @default(uuid())
  chapterId   String
  createdAt   DateTime @default(now())
  isCompleted Boolean  @default(false)
  updatedAt   DateTime @updatedAt
  userId      String
  chapter     Chapter  @relation(fields: [chapterId], references: [id], onDelete: Cascade)

  @@unique([userId, chapterId])
  @@index([chapterId])
}

model Category {
  id      String   @id @default(uuid())
  name    String   @unique
  courses Course[]
}

model Course {
  id          String       @id @default(uuid())
  categoryId  String?
  createdAt   DateTime     @default(now())
  customRates String?
  customTags  String[]
  description String?
  imageUrl    String?
  isPremium   Boolean?     @default(false)
  isPublished Boolean      @default(false)
  language    String?
  price       Int?         @default(0)
  title       String
  updatedAt   DateTime     @updatedAt
  userId      String
  attachments Attachment[]
  chapters    Chapter[]
  category    Category?    @relation(fields: [categoryId], references: [id])
  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  purchases   Purchase[]

  @@index([categoryId])
}

model Attachment {
  id        String   @id @default(uuid())
  courseId  String
  createdAt DateTime @default(now())
  name      String
  updatedAt DateTime @updatedAt
  url       String
  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@index([courseId])
}

model MuxData {
  id        String  @id @default(uuid())
  chapterId String  @unique
  videoUrl  String?
  chapter   Chapter @relation(fields: [chapterId], references: [id], onDelete: Cascade)
}

model Chapter {
  id           String         @id @default(uuid())
  courseId     String
  createdAt    DateTime       @default(now())
  description  String?
  imageUrl     String?
  isFree       Boolean        @default(false)
  isPublished  Boolean        @default(false)
  position     Int
  title        String
  updatedAt    DateTime       @updatedAt
  videoUrl     String?
  course       Course         @relation(fields: [courseId], references: [id], onDelete: Cascade)
  muxData      MuxData?
  userProgress UserProgress[]

  @@index([courseId])
}

model PurchaseDetails {
  id            String   @id @default(uuid())
  city          String?
  country       String?
  countryCode   String?
  createdAt     DateTime @default(now())
  currency      String?
  invoiceId     String?
  latitude      Float?
  longitude     Float?
  paymentIntent String?
  price         Int?
  purchaseId    String   @unique
  updatedAt     DateTime @updatedAt
  purchase      Purchase @relation(fields: [purchaseId], references: [id], onDelete: Cascade)
}

model Purchase {
  id        String           @id @default(uuid())
  courseId  String
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
  userId    String
  course    Course           @relation(fields: [courseId], references: [id], onDelete: Cascade)
  details   PurchaseDetails?

  @@unique([userId, courseId])
  @@index([courseId])
}

model StripeCustomer {
  id               String   @id @default(uuid())
  createdAt        DateTime @default(now())
  stripeCustomerId String   @unique
  updatedAt        DateTime @updatedAt
  userId           String   @unique
}

model StripeConnectAccount {
  id              String          @id @default(uuid())
  createdAt       DateTime        @default(now())
  stripeAccountId String          @unique
  updatedAt       DateTime        @updatedAt
  userId          String          @unique
  payoutRequests  PayoutRequest[]
}

model StripePromo {
  id             String   @id @default(uuid())
  code           String
  createdAt      DateTime @default(now())
  isActive       Boolean  @default(true)
  stripeCouponId String
  stripePromoId  String   @unique
  updatedAt      DateTime @updatedAt
}

model StripeSubscription {
  id                   String    @id @default(uuid())
  cancelAt             DateTime?
  createdAt            DateTime  @default(now())
  endDate              DateTime
  name                 String
  startDate            DateTime  @default(now())
  stripeCustomerId     String    @unique
  stripePriceId        String    @unique
  stripeSubscriptionId String    @unique
  updatedAt            DateTime  @updatedAt
  userId               String    @unique
  user                 User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model StripeSubscriptionDescription {
  id        String                   @id @default(uuid())
  createdAt DateTime                 @default(now())
  name      String
  period    StripeSubscriptionPeriod
  points    String[]
  price     Int?                     @default(0)
  updatedAt DateTime                 @updatedAt
}

model PayoutRequest {
  id                   String               @id @default(uuid())
  amount               Int
  connectAccountId     String
  createdAt            DateTime             @default(now())
  currency             String
  destinationPaymentId String?
  status               String
  transactionId        String?
  updatedAt            DateTime             @updatedAt
  connectAccount       StripeConnectAccount @relation(fields: [connectAccountId], references: [id])

  @@index([connectAccountId])
}

model Fee {
  id        String   @id @default(uuid())
  amount    Int      @default(0)
  createdAt DateTime @default(now())
  method    String
  name      String   @unique
  rate      Float    @default(0)
  type      String?
  updatedAt DateTime @updatedAt
}

model Notification {
  id        String   @id @default(uuid())
  body      String
  createdAt DateTime @default(now())
  isRead    Boolean  @default(false)
  title     String
  updatedAt DateTime @updatedAt
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model CsmCategory {
  id       String     @id @default(uuid())
  name     String     @unique
  csmIssue CsmIssue[]
}

model CsmAttachment {
  id         String    @id @default(uuid())
  createdAt  DateTime  @default(now())
  name       String
  csmIssueId String?
  updatedAt  DateTime  @updatedAt
  url        String
  csmIssue   CsmIssue? @relation(fields: [csmIssueId], references: [id])

  @@index([csmIssueId])
}

model CsmIssue {
  id          String          @id @default(uuid())
  categoryId  String?
  createdAt   DateTime        @default(now())
  description String
  email       String?
  name        String
  status      CsmStatus       @default(new)
  updatedAt   DateTime        @updatedAt
  userId      String?
  attachments CsmAttachment[]
  category    CsmCategory?    @relation(fields: [categoryId], references: [id])
  user        User?           @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([categoryId])
}

model ChatMessage {
  id             String               @id @default(uuid())
  content        String
  conversationId String?
  createdAt      DateTime             @default(now())
  model          String
  role           String
  updatedAt      DateTime             @updatedAt
  conversation   ChatConversation?    @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  feedback       ChatMessageFeedback?

  @@index([conversationId])
}

model ChatMessageFeedback {
  id        String       @id @default(uuid())
  createdAt DateTime     @default(now())
  feedback  ChatFeedback
  messageId String       @unique
  updatedAt DateTime     @updatedAt
  message   ChatMessage  @relation(fields: [messageId], references: [id], onDelete: Cascade)

  @@index([messageId])
}

model ChatConversation {
  id        String                  @id @default(uuid())
  createdAt DateTime                @default(now())
  position  Int
  title     String
  updatedAt DateTime                @updatedAt
  userId    String?
  user      User?                   @relation(fields: [userId], references: [id], onDelete: Cascade)
  messages  ChatMessage[]
  shared    ChatSharedConversation?

  @@index([userId])
}

model ChatSharedConversation {
  id             String           @id @default(uuid())
  conversationId String           @unique
  createdAt      DateTime         @default(now())
  expireAt       DateTime?
  isActive       Boolean?         @default(true)
  isOnlyAuth     Boolean?         @default(false)
  updatedAt      DateTime         @updatedAt
  userId         String?
  conversation   ChatConversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  user           User?            @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([conversationId])
}

enum StripeSubscriptionPeriod {
  monthly
  yearly
}

enum CsmStatus {
  done
  new
  progress
  review
  todo
}

enum ChatFeedback {
  positive
  negative
}
